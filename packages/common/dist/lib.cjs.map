{"version":3,"file":"lib.cjs","sources":["../src/math/vec2.ts","../src/math/rect.ts","../src/types/pathType.ts","../src/protocol/server.ts","../src/protocol/client.ts","../src/protocol/command.ts","../src/protocol/commands/updateHitObject.ts","../src/util/action.ts","../src/osu/hitSound.ts","../src/util/binarySearch.ts","../src/util/uuid.ts","../src/util/randomString.ts","../src/osu/hitObject.ts","../src/osu/hitCircle.ts","../src/osu/sliderPath.ts","../src/osu/slider.ts","../src/osu/spinner.ts","../src/osu/deserializeHitObject.ts","../src/protocol/commands/createHitObjects.ts","../src/osu/bookmark.ts","../src/protocol/commands/bookmarkCommands.ts","../src/protocol/commands/encoder.ts","../src/protocol/commands/index.ts","../src/protocol/presence.ts","../src/osu/controlPointManager.ts","../src/osu/hitObjectManager.ts","../src/osu/hitSound2.ts","../src/osu/hitSoundLayer.ts","../src/osu/envelope.ts","../src/osu/hitSoundManager.ts","../src/osu/beatmap.ts"],"sourcesContent":["export interface IVec2 {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport class Vec2 implements IVec2 {\r\n\r\n  constructor();\r\n  constructor(xy: number);\r\n  constructor(x: number, y: number);\r\n\r\n  constructor(\r\n    public x: number = 0,\r\n    public y: number = x,\r\n  ) {\r\n  }\r\n\r\n  static from(other: IVec2) {\r\n    return new Vec2(other.x, other.y);\r\n  }\r\n\r\n  static equals(a: IVec2, b: IVec2) {\r\n    return a.x === b.x && a.y === b.y;\r\n  }\r\n\r\n  static distance(a: IVec2, b: IVec2) {\r\n    return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\r\n  }\r\n\r\n  static distanceSquared(a: IVec2, b: IVec2) {\r\n    const dx = a.x - b.x;\r\n    const dy = a.y - b.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n\r\n  static closerThan(a: IVec2, b: IVec2, distance: number) {\r\n    return Vec2.distanceSquared(a, b) < distance * distance;\r\n  }\r\n\r\n  static closerThanSquared(a: IVec2, b: IVec2, distanceSquared: number) {\r\n    return Vec2.distanceSquared(a, b) < distanceSquared;\r\n  }\r\n\r\n  static add(a: IVec2, b: IVec2) {\r\n    return new Vec2(a.x + b.x, a.y + b.y);\r\n  }\r\n\r\n  static sub(a: IVec2, b: IVec2) {\r\n    return new Vec2(a.x - b.x, a.y - b.y);\r\n  }\r\n\r\n  static mul(a: IVec2, b: IVec2) {\r\n    return new Vec2(a.x * b.x, a.y * b.y);\r\n  }\r\n\r\n  static scale(a: IVec2, s: number) {\r\n    return new Vec2(a.x * s, a.y * s);\r\n  }\r\n\r\n  static zero() {\r\n    return new Vec2();\r\n  }\r\n\r\n  static normalize(a: IVec2) {\r\n    const length = Math.sqrt(a.x * a.x + a.y * a.y);\r\n    return new Vec2(a.x / length, a.y / length);\r\n  }\r\n\r\n  static lengthSquared(a: IVec2) {\r\n    return a.x * a.x + a.y * a.y;\r\n  }\r\n\r\n  static min(a: IVec2, b: IVec2) {\r\n    return new Vec2(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n  }\r\n\r\n  static max(a: IVec2, b: IVec2) {\r\n    return new Vec2(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n  }\r\n\r\n  static lerp(a: IVec2, b: IVec2, w: number) {\r\n    return new Vec2(\r\n      a.x + (b.x - a.x) * w,\r\n      a.y + (b.y - a.y) * w,\r\n    );\r\n  }\r\n\r\n  static dot(a: IVec2, b: IVec2) {\r\n    return a.x * b.x + a.y * b.y;\r\n  }\r\n\r\n  length() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  lengthSquared() {\r\n    return this.x * this.x + this.y * this.y;\r\n  }\r\n\r\n  equals(other: IVec2) {\r\n    return Vec2.equals(this, other);\r\n  }\r\n\r\n  distanceTo(other: IVec2) {\r\n    return Vec2.distance(this, other);\r\n  }\r\n\r\n  static rotate(a: IVec2, angle: number) {\r\n    const cos = Math.cos(angle);\r\n    const sin = Math.sin(angle);\r\n    return new Vec2(\r\n      a.x * cos - a.y * sin,\r\n      a.x * sin + a.y * cos,\r\n    );\r\n  }\r\n\r\n  add(other: IVec2) {\r\n    return Vec2.add(this, other);\r\n  }\r\n\r\n  sub(other: IVec2) {\r\n    return Vec2.sub(this, other);\r\n  }\r\n\r\n  mul(other: IVec2) {\r\n    return Vec2.mul(this, other);\r\n  }\r\n\r\n  scale(s: number) {\r\n    return Vec2.scale(this, s);\r\n  }\r\n\r\n  normalize() {\r\n    return Vec2.normalize(this);\r\n  }\r\n\r\n  min(other: IVec2) {\r\n    return Vec2.min(this, other);\r\n  }\r\n\r\n  max(other: IVec2) {\r\n    return Vec2.max(this, other);\r\n  }\r\n\r\n  lerp(other: IVec2, w: number) {\r\n    return Vec2.lerp(this, other, w);\r\n  }\r\n\r\n  rotate(angle: number) {\r\n    return Vec2.rotate(this, angle);\r\n  }\r\n\r\n}","import {IVec2, Vec2} from \"./vec2\";\r\n\r\nexport class Rect {\r\n\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n    public width: number,\r\n    public height: number,\r\n  ) {\r\n  }\r\n\r\n  get position(): Vec2 {\r\n    return new Vec2(this.x, this.y);\r\n  }\r\n\r\n  set position(value: Vec2) {\r\n    this.x = value.x;\r\n    this.y = value.y;\r\n  }\r\n\r\n  get size(): Vec2 {\r\n    return new Vec2(this.width, this.height);\r\n  }\r\n\r\n  set size(value: Vec2) {\r\n    this.width = value.x;\r\n    this.height = value.y;\r\n  }\r\n\r\n  splitLeft(width: number): Rect {\r\n    const rect = new Rect(this.x, this.y, width, this.height);\r\n    this.x += width;\r\n    this.width -= width;\r\n    return rect;\r\n  }\r\n\r\n  splitRight(width: number): Rect {\r\n    const rect = new Rect(this.x + this.width, this.y, width, this.height);\r\n    this.width -= width;\r\n    return rect;\r\n  }\r\n\r\n  splitTop(height: number): Rect {\r\n    const rect = new Rect(this.x, this.y, this.width, height);\r\n    this.y += height;\r\n    this.height -= height;\r\n    return rect;\r\n  }\r\n\r\n  splitBottom(height: number): Rect {\r\n    this.height -= height;\r\n    return new Rect(this.x, this.y + this.height, this.width, height);\r\n  }\r\n\r\n  withPosition(position: IVec2): Rect {\r\n    return new Rect(position.x, position.y, this.width, this.height);\r\n  }\r\n\r\n  withSize(size: IVec2): Rect {\r\n    return new Rect(this.x, this.y, size.x, size.y);\r\n  }\r\n\r\n  addPoint(point: IVec2) {\r\n    const x = Math.min(this.x, point.x);\r\n    const y = Math.min(this.y, point.y);\r\n    const right = Math.max(this.x + this.width, point.x);\r\n    const bottom = Math.max(this.y + this.height, point.y);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = right - x;\r\n    this.height = bottom - y;\r\n  }\r\n\r\n  translate({ x, y }: IVec2) {\r\n    this.x += x;\r\n    this.y += y;\r\n  }\r\n\r\n  static containingPoints(points: IVec2[]): Rect | undefined {\r\n    if (points.length === 0) return undefined;\r\n    const rect = new Rect(points[0].x, points[0].y, 0, 0);\r\n    for (const point of points) {\r\n      rect.addPoint(point);\r\n    }\r\n    return rect;\r\n  }\r\n\r\n  get center(): Vec2 {\r\n    return new Vec2(this.x + this.width / 2, this.y + this.height / 2);\r\n  }\r\n\r\n  get right(): number {\r\n    return this.x + this.width;\r\n  }\r\n\r\n  get bottom(): number {\r\n    return this.y + this.height;\r\n  }\r\n\r\n  get left(): number {\r\n    return this.x;\r\n  }\r\n\r\n  get top(): number {\r\n    return this.y;\r\n  }\r\n\r\n}","export const enum PathType {\r\n  Linear = 0,\r\n  PerfectCurve = 1,\r\n  Catmull = 2,\r\n  Bezier = 3,\r\n}","import {fields, TypeNames, variantModule, VariantOf} from \"variant\";\r\nimport {UserId, UserRole, UserSessionInfo} from \"./user\";\r\nimport {SerializedBeatmap, SerializedMapset} from \"./beatmap\";\r\nimport {ChatHistory, ChatMessage} from \"./chat\";\r\nimport {UserActivity} from \"./presence\";\r\nimport {UserInfo} from \"../types\";\r\nimport {VersionedEditorCommand} from \"./client\";\r\n\r\nexport const ServerMessage = variantModule({\r\n  roomState: fields<{ users: UserSessionInfo[], mapset: SerializedMapset, chat: ChatHistory }>(),\r\n  userJoined: fields<{ user: UserSessionInfo }>(),\r\n  userLeft: fields<{ user: UserInfo, reason: LeaveReason }>(),\r\n  kicked: fields<{ reason: string, isBan: boolean }>(),\r\n  chatMessage: fields<ChatMessage>(),\r\n  userActivity: fields<{ user: UserId, activity: UserActivity }>(),\r\n  userRoleChanged: fields<{ id: UserInfo, role: UserRole }>(),\r\n});\r\n\r\nexport type ServerMessage<T extends TypeNames<typeof ServerMessage> = undefined> = VariantOf<typeof ServerMessage, T>;\r\n\r\ntype LeaveReason = \"disconnected\" | \"kicked\" | \"banned\";\r\n\r\nexport interface ServerMessages {\r\n  roomState(payload: {\r\n    users: UserSessionInfo[],\r\n    beatmap: SerializedBeatmap,\r\n    chat: ChatHistory,\r\n    ownUser: UserSessionInfo\r\n  }): void;\r\n\r\n  userJoined(user: UserSessionInfo): void;\r\n\r\n  userLeft(user: UserSessionInfo, reason: LeaveReason): void;\r\n\r\n  kicked(reason: string, isBan: boolean): void;\r\n\r\n  chatMessage(message: ChatMessage): void;\r\n\r\n  userActivity(sessionId: number, activity: UserActivity): void;\r\n\r\n  userRoleChanged(id: UserInfo, role: UserRole): void;\r\n\r\n  commands(commands: Uint8Array, sessionId: number): void;\r\n\r\n  roll(user: UserSessionInfo): void;\r\n}","import {fields, payload, TypeNames, variantModule, VariantOf} from \"variant\";\r\nimport {UserId} from \"./user\";\r\nimport {Presence} from \"./presence\";\r\nimport {EditorCommand} from \"./commands\";\r\n\r\n\r\nexport const ClientMessage = variantModule({\r\n  kickUser: fields<{ id: UserId, reason: string, isBan: boolean }>(),\r\n  sendChatMessage: fields<{ message: string }>(),\r\n  leave: fields(),\r\n  setPresence: fields<Presence>(),\r\n  setRole: fields<{ id: UserId, role: string }>(),\r\n  commands: payload<EditorCommand>(),\r\n  roll: fields<{}>(),\r\n});\r\n\r\nexport type ClientMessage<T extends TypeNames<typeof ClientMessage>> = VariantOf<typeof ClientMessage, T>;\r\n\r\nexport type VersionedEditorCommand = { command: EditorCommand, version: number };\r\n\r\nexport interface ClientMessages {\r\n  kickUser(id: UserId, reason: string, isBan: boolean): void;\r\n\r\n  sendChatMessage(message: string): void;\r\n\r\n  leave(): void;\r\n\r\n  setPresence(presence: Presence): void;\r\n\r\n  setRole(id: UserId, role: string): void;\r\n\r\n  commands(commands: Uint8Array): void;\r\n\r\n  roll(): void;\r\n}","import {Beatmap, HitObjectManager} from \"../osu\";\r\nimport {EditorCommand} from \"./commands\";\r\n\r\nexport class CommandContext {\r\n\r\n  get hitObjects(): HitObjectManager {\r\n    return this.beatmap.hitObjects;\r\n  }\r\n\r\n  constructor(\r\n    readonly beatmap: Beatmap,\r\n    readonly local: boolean,\r\n    readonly own: boolean,\r\n    readonly version: number,\r\n  ) {\r\n  }\r\n}\r\n\r\ntype UndoType = \"undo\" | \"redo\";\r\n\r\nexport interface CommandHandler<T> {\r\n  apply(command: T, context: CommandContext): void;\r\n\r\n  canBeIgnored?(command: T, context: CommandContext): boolean;\r\n\r\n  createUndo?(command: T, context: CommandContext, type: UndoType): EditorCommand | undefined;\r\n\r\n  merge?(a: T, b: T, context: CommandContext): EditorCommand | undefined;\r\n}\r\n\r\n","import {CommandContext, CommandHandler} from \"../command\";\r\nimport {SerializedHitObject} from \"../../types\";\r\nimport {HitObject} from \"../../osu\";\r\nimport {EditorCommand} from \"./index\";\r\n\r\nexport interface UpdateHitObjectCommand {\r\n  hitObject: string;\r\n  update: Partial<SerializedHitObject>;\r\n}\r\n\r\nconst key = \"_pendingInfo\";\r\n\r\ninterface PendingInfo {\r\n  [key: string]: number;\r\n}\r\n\r\nexport const UpdateHitObjectHandler: CommandHandler<UpdateHitObjectCommand> = {\r\n  apply(command, context): void {\r\n    const hitObject = context.hitObjects.getById(command.hitObject);\r\n    if (!hitObject) return;\r\n\r\n    if (context.local) {\r\n      for (const key in command.update) {\r\n        setPendingInfo(hitObject, key, context.version);\r\n      }\r\n      hitObject.patch(command.update);\r\n\r\n    } else if (context.own) {\r\n      const pending = getPendingInfo(hitObject);\r\n      for (const key in command.update) {\r\n        if (pending[key] === context.version) {\r\n          delete pending[key];\r\n        }\r\n      }\r\n    } else {\r\n      const pending = getPendingInfo(hitObject);\r\n      const update = {} as any;\r\n      for (const key in command.update) {\r\n        if (pending[key] === undefined) {\r\n          update[key] = command.update[key];\r\n        }\r\n      }\r\n      hitObject.patch(update);\r\n    }\r\n  },\r\n  createUndo(command, context) {\r\n    const hitObject = context.hitObjects.getById(command.hitObject);\r\n    if (!hitObject) return;\r\n\r\n    let update = {} as any;\r\n    const serialized = hitObject.serialize();\r\n    for (const key in command.update) {\r\n      update[key] = serialized[key];\r\n    }\r\n    return {\r\n      type: \"updateHitObject\",\r\n      hitObject: command.hitObject,\r\n      update: update,\r\n    };\r\n  },\r\n  merge(a: UpdateHitObjectCommand, b: UpdateHitObjectCommand, context: CommandContext): EditorCommand | undefined {\r\n    if (a.hitObject === b.hitObject) {\r\n      return {\r\n        type: \"updateHitObject\",\r\n        hitObject: a.hitObject,\r\n        update: {\r\n          ...a.update,\r\n          ...b.update,\r\n        },\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\n\r\nfunction getPendingInfo(hitObject: HitObject) {\r\n  if (!hitObject[key]) {\r\n    (hitObject[key] as PendingInfo) = {};\r\n  }\r\n  return hitObject[key] as PendingInfo;\r\n}\r\n\r\nfunction setPendingInfo(hitObject: HitObject, key: string, version: number) {\r\n  getPendingInfo(hitObject)[key] = version;\r\n}","type ActionListener<T extends any[]> = (...args: T) => void;\r\n\r\nexport class Action<T extends any[]> {\r\n  private _listeners: ActionListener<T>[] = [];\r\n\r\n  addListener(listener: ActionListener<T>) {\r\n    this._listeners.push(listener);\r\n  }\r\n\r\n  removeListener(listener: ActionListener<T>) {\r\n    const index = this._listeners.indexOf(listener);\r\n    if (index >= 0) {\r\n      this._listeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  emit(...args: T) {\r\n    for (const listener of this._listeners) {\r\n      listener(...args);\r\n    }\r\n  }\r\n\r\n  removeListeners() {\r\n    this._listeners = [];\r\n  }\r\n}","export interface HitSound {\r\n  sampleSet: SampleSet;\r\n  additionSet: SampleSet;\r\n  additions: Additions;\r\n  index: number;\r\n}\r\n\r\nexport interface HitSample {\r\n  time: number;\r\n  endTime?: number;\r\n  volume: number;\r\n  sampleSet: SampleSet;\r\n  type: SampleType;\r\n  index: number;\r\n}\r\n\r\nexport const enum SampleSet {\r\n  Auto = 0,\r\n  Normal = 1,\r\n  Soft = 2,\r\n  Drum = 3,\r\n}\r\n\r\nexport const enum SampleType {\r\n  Normal = 0,\r\n  Whistle = 1,\r\n  Finish = 2,\r\n  Clap = 3,\r\n}\r\n\r\nexport const enum Additions {\r\n  None = 0,\r\n  Whistle = 1 << 0,\r\n  Finish = 1 << 1,\r\n  Clap = 1 << 2,\r\n}\r\n\r\nexport function defaultHitSound(): HitSound {\r\n  return {\r\n    sampleSet: SampleSet.Auto,\r\n    additionSet: SampleSet.Auto,\r\n    additions: Additions.None,\r\n    index: 0,\r\n  };\r\n}\r\n\r\nexport function getSamples(hitSound: HitSound, time: number): HitSample[] {\r\n  const samples: HitSample[] = [\r\n    {\r\n      time,\r\n      type: SampleType.Normal,\r\n      sampleSet: hitSound.sampleSet,\r\n      index: hitSound.index,\r\n      volume: 1.0,\r\n    }\r\n  ];\r\n\r\n  let additionSet = hitSound.additionSet;\r\n  if(additionSet === SampleSet.Auto)\r\n    additionSet = hitSound.sampleSet;\r\n\r\n  if (hitSound.additions & Additions.Whistle) {\r\n    samples.push({\r\n      time,\r\n      type: SampleType.Whistle,\r\n      sampleSet: additionSet,\r\n      index: hitSound.index,\r\n      volume: 1.0,\r\n    });\r\n  }\r\n\r\n  if (hitSound.additions & Additions.Finish) {\r\n    samples.push({\r\n      time,\r\n      type: SampleType.Finish,\r\n      sampleSet: additionSet,\r\n      index: hitSound.index,\r\n      volume: 1.0,\r\n    });\r\n  }\r\n\r\n  if (hitSound.additions & Additions.Clap) {\r\n    samples.push({\r\n      time,\r\n      type: SampleType.Clap,\r\n      sampleSet: additionSet,\r\n      index: hitSound.index,\r\n      volume: 1.0,\r\n    });\r\n  }\r\n\r\n  return samples;\r\n}","export function binarySearch<T>(\r\n  needle: number,\r\n  haystack: T[],\r\n  compareBy: (item: T) => number,\r\n): { index: number, found: boolean } {\r\n  let low = 0;\r\n  let high = haystack.length - 1;\r\n\r\n  while (low <= high) {\r\n    const mid = (low + high) >>> 1;\r\n    const midValue = compareBy(haystack[mid]);\r\n\r\n    if (midValue < needle) {\r\n      low = mid + 1;\r\n    } else if (midValue > needle) {\r\n      high = mid - 1;\r\n    } else {\r\n      return { index: mid, found: true };\r\n    }\r\n  }\r\n\r\n  return { index: low, found: false };\r\n}","import * as uuid from \"uuid\";\r\n\r\nexport type EncodedUuid = number[];\r\n\r\nexport function encodeUuid(uuidString: string): number[] {\r\n  // parse accountId into Uint8Array[16] variable\r\n  const parsedUuid = uuid.parse(uuidString);\r\n  // convert to integer - see answers to https://stackoverflow.com/q/39346517/2860309\r\n\r\n  return Array.from(\r\n    new Int32Array(parsedUuid.buffer, 0, parsedUuid.byteLength / Int32Array.BYTES_PER_ELEMENT),\r\n  );\r\n}\r\n\r\nexport function decodeUuid(values: number[]): string {\r\n  // convert to Uint8Array[16] - see answers to https://stackoverflow.com/q/39346517/2860309\r\n  const uuidBuffer = new ArrayBuffer(16);\r\n  const uuidBytes = new Uint8Array(uuidBuffer);\r\n  uuidBytes.set(values);\r\n  // convert to string\r\n  return uuid.stringify(uuidBytes);\r\n}","const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\nexport function randomString(length: number): string {\r\n  let result = \"\";\r\n\r\n  const charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++)\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  return result;\r\n}","import {Vec2} from \"../math\";\r\nimport {Attribution, SerializedHitObject} from \"../types\";\r\nimport {SerializedBeatmapDifficulty} from \"../protocol\";\r\nimport {ControlPointManager} from \"./controlPointManager\";\r\nimport {Action} from \"../util/action\";\r\nimport {defaultHitSound, HitSample, HitSound} from \"./hitSound\";\r\nimport {randomString} from \"../util\";\r\n\r\nexport function hitObjectId() {\r\n  return randomString(8);\r\n}\r\n\r\nexport abstract class HitObject {\r\n\r\n  constructor(options?: SerializedHitObject) {\r\n    if (options) {\r\n      if (options.id)\r\n        this.id = options.id;\r\n      this.startTime = options.startTime;\r\n      this.position = new Vec2(options.position.x, options.position.y);\r\n      this.attribution = options.attribution;\r\n      this.isNewCombo = options.newCombo;\r\n      this.comboOffset = options.comboOffset ?? 0;\r\n      if (options.hitSound)\r\n        this._hitSound = {...options.hitSound};\r\n    }\r\n  }\r\n\r\n  abstract readonly type: HitObjectType;\r\n\r\n\r\n  id: string = hitObjectId();\r\n\r\n  comboOffset = 0;\r\n\r\n  protected _version = 0\r\n  get version() {\r\n    return this._version;\r\n  }\r\n\r\n\r\n  private _position = new Vec2(0, 0);\r\n\r\n  get position(): Vec2 {\r\n    return this._position;\r\n  }\r\n\r\n  protected _hitSound: HitSound = defaultHitSound();\r\n\r\n  get hitSound() {\r\n    return this._hitSound;\r\n  }\r\n\r\n  set hitSound(value: HitSound) {\r\n    this._hitSound = value;\r\n    this._hitSamples = undefined;\r\n    this._onUpdate(\"hitSounds\");\r\n  }\r\n\r\n  set position(value: Vec2) {\r\n    if (Vec2.equals(value, this._position)) return;\r\n    this._position = value;\r\n    this._stackedPosition = undefined;\r\n    this._onUpdate(\"position\");\r\n  }\r\n\r\n  private _startTime: number = 0;\r\n\r\n  get startTime(): number {\r\n    return this._startTime;\r\n  }\r\n\r\n  set startTime(value: number) {\r\n    if (value === this._startTime) return;\r\n    this._startTime = value;\r\n    this._onUpdate(\"startTime\");\r\n  }\r\n\r\n  abstract duration: number;\r\n\r\n  attribution?: Attribution;\r\n\r\n  get endTime(): number {\r\n    return this.startTime + this.duration;\r\n  }\r\n\r\n  get endPosition(): Vec2 {\r\n    return this.position;\r\n  }\r\n\r\n  comboIndex = 0;\r\n  indexInCombo = 0;\r\n  scale = 1;\r\n  timePreempt = 0;\r\n  timeFadeIn = 0;\r\n\r\n  private _stackHeight = 0;\r\n\r\n  get stackHeight(): number {\r\n    return this._stackHeight;\r\n  }\r\n\r\n  set stackHeight(value: number) {\r\n    if (value === this._stackHeight) return;\r\n    this._stackHeight = value;\r\n    this._stackedPosition = undefined;\r\n  }\r\n\r\n  stackRoot?: string;\r\n\r\n  applyDefaults(difficulty: SerializedBeatmapDifficulty, controlPoints: ControlPointManager) {\r\n    this.scale = (1.0 - (0.7 * (difficulty.circleSize - 5)) / 5) / 2;\r\n    this.timePreempt = difficultyRange(\r\n        difficulty.approachRate,\r\n        1800,\r\n        1200,\r\n        450,\r\n    );\r\n    this.timeFadeIn = 400 * Math.min(1, this.timePreempt, 400);\r\n  }\r\n\r\n  private _isNewCombo: boolean = false;\r\n\r\n  get isNewCombo(): boolean {\r\n    return this._isNewCombo;\r\n  }\r\n\r\n  set isNewCombo(value: boolean) {\r\n    this._isNewCombo = value;\r\n    this._onUpdate(\"newCombo\");\r\n  }\r\n\r\n  abstract serialize(): SerializedHitObject\r\n\r\n  onUpdate = new Action<[HitObjectUpdateType]>();\r\n\r\n  private _stackedPosition?: Vec2;\r\n\r\n  get stackedPosition(): Vec2 {\r\n    //if (this._stackedPosition) return this._stackedPosition;\r\n    this._stackedPosition = Vec2.sub(this.position, new Vec2(this.stackHeight * 3, this.stackHeight * 3));\r\n    return this._stackedPosition;\r\n  }\r\n\r\n  depthInfo = {\r\n    position: new Vec2(),\r\n    scale: 1,\r\n  };\r\n\r\n  patch(update: Partial<SerializedHitObject>) {\r\n    if (update.newCombo !== undefined) this.isNewCombo = update.newCombo;\r\n    if (update.position !== undefined) this.position = new Vec2(update.position.x, update.position.y);\r\n    if (update.startTime !== undefined) this.startTime = update.startTime;\r\n    if (update.hitSound !== undefined) this.hitSound = update.hitSound;\r\n  }\r\n\r\n  get radius(): number {\r\n    return 59 * this.scale;\r\n  }\r\n\r\n  abstract contains(point: Vec2): boolean\r\n\r\n  private _isSelected = false;\r\n  get isSelected(): boolean {\r\n    return this._isSelected;\r\n  }\r\n\r\n  set isSelected(value: boolean) {\r\n    this._isSelected = value;\r\n    this.onUpdate.emit(\"selected\");\r\n  }\r\n\r\n  protected _hitSamples?: HitSample[];\r\n\r\n  get hitSamples(): HitSample[] {\r\n    if (this._hitSamples === undefined)\r\n      this._hitSamples = this.calculateHitSamples();\r\n    return this._hitSamples;\r\n  }\r\n\r\n  abstract calculateHitSamples(): HitSample[];\r\n\r\n  protected _updateHitSounds() {\r\n  }\r\n\r\n  protected _onUpdate(update: HitObjectUpdateType) {\r\n    this._version++;\r\n    this.onUpdate.emit(update);\r\n  }\r\n\r\n}\r\n\r\nexport type HitObjectUpdateType =\r\n    \"startTime\"\r\n    | \"position\"\r\n    | \"newCombo\"\r\n    | \"stackHeight\"\r\n    | \"selected\"\r\n    | \"combo\"\r\n    | \"repeats\"\r\n    | \"velocity\"\r\n    | \"duration\"\r\n    | \"hitSounds\";\r\n\r\nfunction difficultyRange(\r\n    diff: number,\r\n    min: number,\r\n    mid: number,\r\n    max: number,\r\n): number {\r\n  if (diff > 5) {\r\n    return mid + ((max - mid) * (diff - 5)) / 5;\r\n  }\r\n\r\n  if (diff < 5) {\r\n    return mid - ((mid - min) * (5 - diff)) / 5;\r\n  }\r\n\r\n  return mid;\r\n}\r\n\r\nexport const enum HitObjectType {\r\n  Circle = 1,\r\n  Slider = 2,\r\n  Spinner = 3,\r\n}","import {HitObject, HitObjectType} from \"./hitObject\";\r\nimport {SerializedHitCircle} from \"../types\";\r\nimport {Vec2} from \"../math\";\r\nimport {Additions, defaultHitSound, getSamples, HitSample, HitSound, SampleSet, SampleType} from \"./hitSound\";\r\n\r\nexport class HitCircle extends HitObject {\r\n\r\n  readonly type = HitObjectType.Circle;\r\n\r\n  constructor(options?: SerializedHitCircle) {\r\n    super(options);\r\n  }\r\n\r\n  get duration() {\r\n    return 0;\r\n  }\r\n\r\n  serialize(): SerializedHitCircle {\r\n    return {\r\n      id: this.id,\r\n      type: \"circle\",\r\n      position: this.position,\r\n      newCombo: this.isNewCombo,\r\n      startTime: this.startTime,\r\n      comboOffset: this.comboOffset,\r\n      attribution: this.attribution,\r\n      hitSound: { ...this._hitSound },\r\n    };\r\n  }\r\n\r\n  contains(point: Vec2): boolean {\r\n    return Vec2.closerThan(this.stackedPosition, point, this.radius);\r\n  }\r\n\r\n  calculateHitSamples(): HitSample[] {\r\n    return getSamples(this.hitSound, this.startTime);\r\n  }\r\n\r\n}","import {PathType, SerializedPathPoint} from \"../types\";\r\nimport {Vec2} from \"../math\";\r\nimport {PathApproximator, Vector2} from \"osu-classes\";\r\nimport {clamp} from \"@vueuse/core\";\r\n\r\nexport class SliderPath {\r\n\r\n  controlPoints: SerializedPathPoint[];\r\n  private _expectedDistance = 0;\r\n\r\n  constructor(\r\n    path: SerializedPathPoint[] = [],\r\n    expectedDistance: number = 0,\r\n  ) {\r\n    this.controlPoints = path;\r\n    this._expectedDistance = expectedDistance;\r\n  }\r\n\r\n  private _version = 0;\r\n  private _calculatedPath: Vec2[] | undefined;\r\n  private _cumulativeDistance: number[] | undefined;\r\n  private _calculatedRange: Vec2[] | undefined;\r\n  private _endPosition: Vec2 | undefined;\r\n\r\n  get expectedDistance() {\r\n    return this._expectedDistance;\r\n  }\r\n\r\n  set expectedDistance(value: number) {\r\n    if (value === this._expectedDistance) return;\r\n    this._expectedDistance = value;\r\n    this._calculatedRange = undefined;\r\n    this._endPosition = undefined;\r\n    this._version++;\r\n  }\r\n\r\n  get endPosition() {\r\n    if (this._endPosition === undefined)\r\n      this._endPosition = this.getPositionAtDistance(this.expectedDistance);\r\n    return this._endPosition;\r\n  }\r\n\r\n  invalidate() {\r\n    this._calculatedPath = undefined;\r\n    this._calculatedRange = undefined;\r\n    this._endPosition = undefined;\r\n    this._version++;\r\n  }\r\n\r\n  get calculatedPath() {\r\n    if (this._calculatedPath === undefined) {\r\n      const [path, cumulativeDistance] = this._calculatePath();\r\n      this._calculatedPath = path;\r\n      this._cumulativeDistance = cumulativeDistance;\r\n    }\r\n    return this._calculatedPath;\r\n  }\r\n\r\n  get calculatedRange() {\r\n    if (this._calculatedRange === undefined)\r\n      this._calculatedRange = this.getRange(0, this.expectedDistance);\r\n    return this._calculatedRange;\r\n  }\r\n\r\n  get cumulativeDistance() {\r\n    if (this._cumulativeDistance === undefined) {\r\n      const [path, cumulativeDistance] = this._calculatePath();\r\n      this._calculatedPath = path;\r\n      this._cumulativeDistance = cumulativeDistance;\r\n    }\r\n    return this._cumulativeDistance;\r\n  }\r\n\r\n  get totalLength() {\r\n    return this.cumulativeDistance[this.cumulativeDistance.length - 1] ?? 0;\r\n  }\r\n\r\n  get version() {\r\n    return this._version;\r\n  }\r\n\r\n  private _calculatePath(): [Vec2[], number[]] {\r\n    if (this.controlPoints.length === 0) return [[new Vec2(0, 0)], [0]];\r\n\r\n    const points: Vec2[] = [\r\n      new Vec2(this.controlPoints[0].x, this.controlPoints[0].y),\r\n    ] as Vec2[];\r\n    const cumulativeDistance = [0] as number[];\r\n    let segmentStart = 0;\r\n\r\n    for (let i = 1; i < this.controlPoints.length; i++) {\r\n      if (\r\n        this.controlPoints[i].type !== null ||\r\n        i === this.controlPoints.length - 1\r\n      ) {\r\n        const segment = this.calculateSegment(\r\n          this.controlPoints[segmentStart].type ?? PathType.Bezier,\r\n          segmentStart,\r\n          i,\r\n        );\r\n\r\n        for (const point of segment) {\r\n          const last = points[points.length - 1];\r\n          if (Vec2.equals(last, point)) continue;\r\n\r\n          points.push(new Vec2(point.x, point.y));\r\n          cumulativeDistance.push(\r\n            cumulativeDistance[cumulativeDistance.length - 1] +\r\n            Vec2.distance(last, point),\r\n          );\r\n        }\r\n\r\n        segmentStart = i;\r\n      }\r\n    }\r\n\r\n    return [points, cumulativeDistance];\r\n  }\r\n\r\n  private calculateSegment(type: PathType, start: number, end: number) {\r\n    const points = this.controlPoints\r\n      .slice(start, end + 1)\r\n      .map((p) => new Vector2(p.x, p.y));\r\n    switch (type) {\r\n      case PathType.Linear:\r\n        return PathApproximator.approximateLinear(points);\r\n      case PathType.PerfectCurve:\r\n        if (points.length === 3)\r\n          return PathApproximator.approximateCircularArc(points);\r\n      case PathType.Bezier:\r\n        return PathApproximator.approximateBezier(points);\r\n      case PathType.Catmull:\r\n        return PathApproximator.approximateCatmull(points);\r\n    }\r\n  }\r\n\r\n  getRange(start: number, end: number) {\r\n    let d0 = start;\r\n    let d1 = end;\r\n\r\n    let i = 0;\r\n\r\n    const calculatedPath = this.calculatedPath;\r\n    const cumulativeDistance = this._cumulativeDistance;\r\n\r\n    for (; i < calculatedPath.length && cumulativeDistance[i] < d0; ++i) {\r\n    }\r\n\r\n    const path: Vec2[] = [];\r\n    path.push(this.interpolateVertices(i, d0));\r\n\r\n    const t = i;\r\n    for (; i < calculatedPath.length && cumulativeDistance[i] <= d1; ++i) {\r\n      const p = calculatedPath[i];\r\n      if (!Vec2.equals(path[path.length - 1], p)) path.push(p);\r\n    }\r\n\r\n    const p = this.interpolateVertices(i, d1);\r\n    if (!Vec2.equals(path[path.length - 1], p)) path.push(p);\r\n\r\n    return path;\r\n  }\r\n\r\n  interpolateVertices(i: number, d: number) {\r\n    if (this.calculatedPath.length === 0) return Vec2.zero();\r\n\r\n    if (i <= 0) return this.calculatedPath[0];\r\n    if (i >= this.calculatedPath.length)\r\n      return this.calculatedPath[this.calculatedPath.length - 1];\r\n\r\n    let p0 = this.calculatedPath[i - 1];\r\n    let p1 = this.calculatedPath[i];\r\n\r\n    let d0 = this._cumulativeDistance[i - 1];\r\n    let d1 = this._cumulativeDistance[i];\r\n\r\n    // Avoid division by and almost-zero number in case two points are extremely close to each other.\r\n    if (Math.abs(d0 - d1) < 0.001) return p0;\r\n\r\n    const w = (d - d0) / (d1 - d0);\r\n    return Vec2.lerp(p0, p1, w);\r\n  }\r\n\r\n  getPositionAtDistance(d: number): Vec2 {\r\n    if (this.calculatedPath.length <= 1) return new Vec2();\r\n    let i = 0;\r\n    const calculatedPath = this.calculatedPath;\r\n    const cumulativeDistance = this._cumulativeDistance;\r\n    while (i < cumulativeDistance.length - 1) {\r\n      if (cumulativeDistance[i + 1] > d) break;\r\n      i++;\r\n    }\r\n\r\n    const start = calculatedPath[i];\r\n    const end = calculatedPath[i + 1];\r\n    const distance =\r\n      cumulativeDistance[i + 1] - cumulativeDistance[i];\r\n    let t = (d - cumulativeDistance[i]) / distance;\r\n\r\n    t = clamp(t, 0, 1);\r\n\r\n    if (!end) return start;\r\n\r\n    return new Vec2(\r\n      start.x + (end.x - start.x) * t,\r\n      start.y + (end.y - start.y) * t,\r\n    );\r\n  }\r\n\r\n}","import {HitObject, HitObjectType} from \"./hitObject\";\r\nimport {SerializedSlider} from \"../types\";\r\nimport {SerializedBeatmapDifficulty} from \"../protocol\";\r\nimport {ControlPointManager} from \"./controlPointManager\";\r\nimport {SliderPath} from \"./sliderPath\";\r\nimport {Vec2} from \"../math\";\r\nimport {defaultHitSound, getSamples, HitSample, HitSound, SampleSet, SampleType} from \"./hitSound\";\r\n\r\nexport class Slider extends HitObject {\r\n\r\n  readonly type = HitObjectType.Slider;\r\n\r\n  constructor(options?: SerializedSlider) {\r\n    super(options);\r\n\r\n    if (options) {\r\n      this.repeats = options.repeats;\r\n      this.velocityOverride = options.velocity;\r\n      this.path = new SliderPath(options.path, options.expectedDistance);\r\n\r\n      if (options.hitSounds)\r\n        this.hitSounds = options.hitSounds;\r\n\r\n      this._updateHitSounds();\r\n    }\r\n  }\r\n\r\n\r\n  get expectedDistance() {\r\n    return this.path.expectedDistance;\r\n  }\r\n\r\n  set expectedDistance(value: number) {\r\n    this.path.expectedDistance = value;\r\n  }\r\n\r\n  private _repeats = 0;\r\n  get repeats() {\r\n    return this._repeats;\r\n  }\r\n\r\n  set repeats(value: number) {\r\n    if (value === this._repeats) return;\r\n    this._repeats = value;\r\n    this.onUpdate.emit(\"repeats\");\r\n    this._updateHitSounds();\r\n  }\r\n\r\n  private _hitSounds: HitSound[] = [];\r\n  get hitSounds() {\r\n    return this._hitSounds;\r\n  }\r\n\r\n  set hitSounds(value: HitSound[]) {\r\n    this._hitSounds = value;\r\n    this._hitSamples = undefined;\r\n    this.onUpdate.emit(\"hitSounds\");\r\n  }\r\n\r\n  private _velocityOverride: number | null = null;\r\n\r\n  get velocityOverride() {\r\n    return this._velocityOverride;\r\n  }\r\n\r\n  set velocityOverride(value: number | null | undefined) {\r\n    if (value === this._velocityOverride) return;\r\n    this._velocityOverride = value ?? null;\r\n    this.onUpdate.emit(\"velocity\");\r\n  }\r\n\r\n  path = new SliderPath();\r\n\r\n  private _baseVelocity = 1;\r\n  private inheritedVelocity = 1;\r\n\r\n  get baseVelocity() {\r\n    return this._baseVelocity;\r\n  }\r\n\r\n  get velocity() {\r\n    return (this.velocityOverride ?? this.inheritedVelocity) * this._baseVelocity;\r\n  }\r\n\r\n  get spanDuration() {\r\n    return this.expectedDistance / this.velocity;\r\n  }\r\n\r\n  get duration() {\r\n    return this.spanDuration * this.spans;\r\n  }\r\n\r\n  get spans() {\r\n    return this.repeats + 1;\r\n  }\r\n\r\n  set spans(value: number) {\r\n    this.repeats = value - 1;\r\n  }\r\n\r\n  applyDefaults(difficulty: SerializedBeatmapDifficulty, controlPoints: ControlPointManager) {\r\n    super.applyDefaults(difficulty, controlPoints);\r\n    const timingPoint = controlPoints.timingPointAt(this.startTime);\r\n\r\n    const baseScoringDistance = 100 * difficulty.sliderMultiplier;\r\n    this._baseVelocity = baseScoringDistance / timingPoint.beatLength;\r\n    this.inheritedVelocity = controlPoints.getVelocityAt(this.startTime);\r\n  }\r\n\r\n  serialize(): SerializedSlider {\r\n    return {\r\n      id: this.id,\r\n      type: \"slider\",\r\n      path: this.path.controlPoints,\r\n      position: this.position,\r\n      newCombo: this.isNewCombo,\r\n      startTime: this.startTime,\r\n      attribution: this.attribution,\r\n      repeats: this.repeats,\r\n      expectedDistance: this.expectedDistance,\r\n      comboOffset: this.comboOffset,\r\n      velocity: this.velocityOverride,\r\n      hitSound: { ...this.hitSound },\r\n      hitSounds: this.hitSounds.map(s => ({ ...s })),\r\n    };\r\n  }\r\n\r\n  override get endPosition(): Vec2 {\r\n    if (this.repeats % 2 == 0) return Vec2.add(this.position, this.path.endPosition);\r\n    return this.position;\r\n  }\r\n\r\n  positionAt(time: number) {\r\n    if (time < this.startTime) return Vec2.zero();\r\n    if (time > this.endTime) return this.repeats % 2 == 0 ? this.path.endPosition : Vec2.zero();\r\n\r\n    const spanDuration = this.spanDuration;\r\n    const spanIndex = Math.floor((time - this.startTime) / spanDuration);\r\n    const spanStartTime = this.startTime + spanIndex * spanDuration;\r\n\r\n    let spanProgress = (time - spanStartTime) / spanDuration;\r\n    if (spanIndex % 2 === 1) spanProgress = 1 - spanProgress;\r\n\r\n    return this.path.getPositionAtDistance(spanProgress * this.expectedDistance);\r\n  }\r\n\r\n  angleAt(time: number) {\r\n    if (time <= this.startTime + 1) {\r\n      return this.angleAt(this.startTime + 1);\r\n    }\r\n\r\n    const pos1 = this.positionAt(time - 1);\r\n    const pos2 = this.positionAt(time);\r\n    return Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\r\n  }\r\n\r\n  get startAngle() {\r\n    const p1 = this.path.controlPoints[0];\r\n    const p2 = this.path.getPositionAtDistance(1);\r\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x);\r\n  }\r\n\r\n  get endAngle() {\r\n    const p1 = this.path.getPositionAtDistance(this.expectedDistance - 1);\r\n    const p2 = this.path.endPosition;\r\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x);\r\n  }\r\n\r\n  contains(point: Vec2): boolean {\r\n    const radiusSquared = this.radius * this.radius;\r\n    if (Vec2.closerThanSquared(this.stackedPosition, point, radiusSquared))\r\n      return true;\r\n    if (Vec2.closerThanSquared(Vec2.add(this.stackedPosition, this.path.endPosition), point, radiusSquared))\r\n      return true;\r\n\r\n    point = Vec2.sub(point, this.stackedPosition);\r\n\r\n    const path = this.path.calculatedRange;\r\n    let distance = 0;\r\n    const step = 10;\r\n    let i = 1;\r\n    while (distance < this.path.expectedDistance) {\r\n      distance += step;\r\n      while (i < path.length - 1 && this.path.cumulativeDistance[i] < distance)\r\n        i++;\r\n\r\n      let p1 = path[i - 1];\r\n      let p2 = path[i];\r\n      let d1 = this.path.cumulativeDistance[i - 1];\r\n      let d2 = this.path.cumulativeDistance[i];\r\n      let t = (distance - d1) / (d2 - d1);\r\n      let x = p1.x + (p2.x - p1.x) * t;\r\n      let y = p1.y + (p2.y - p1.y) * t;\r\n\r\n      if (Vec2.closerThanSquared(new Vec2(x, y), point, radiusSquared))\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  patch(update: Partial<SerializedSlider>) {\r\n    super.patch(update);\r\n    if (update.path !== undefined) {\r\n      this.path.controlPoints = update.path;\r\n      this.path.invalidate();\r\n      this.onUpdate.emit(\"position\");\r\n    }\r\n    if (update.expectedDistance !== undefined) {\r\n      this.path.expectedDistance = update.expectedDistance;\r\n      this.path.invalidate();\r\n      this.onUpdate.emit(\"position\");\r\n    }\r\n    if (update.repeats !== undefined) {\r\n      this.repeats = update.repeats;\r\n    }\r\n    if (update.velocity !== undefined) {\r\n      this.velocityOverride = update.velocity;\r\n    }\r\n    if (update.hitSounds !== undefined) {\r\n      this.hitSounds = update.hitSounds;\r\n    }\r\n  }\r\n\r\n  calculateHitSamples(): HitSample[] {\r\n    return [\r\n      //...getSamples(this.hitSound, this.startTime),\r\n      ...this.hitSounds.flatMap((hitSound, i) => {\r\n        return getSamples(hitSound, this.startTime + i * this.spanDuration);\r\n      }),\r\n    ];\r\n  }\r\n\r\n  protected override _updateHitSounds() {\r\n    if (this._hitSounds.length === this.spans + 1) return;\r\n    if (this._hitSounds.length > this.spans + 1) {\r\n      const last = this._hitSounds[this._hitSounds.length - 1] ?? defaultHitSound();\r\n      this._hitSounds.length = this.spans + 1;\r\n      this._hitSounds[this._hitSounds.length - 1] = last;\r\n      this.onUpdate.emit(\"hitSounds\");\r\n    } else {\r\n      const last = this._hitSounds[this._hitSounds.length - 1] ?? defaultHitSound();\r\n      while (this._hitSounds.length < this.spans + 1) {\r\n        this._hitSounds.push(last);\r\n      }\r\n      this.onUpdate.emit(\"hitSounds\");\r\n    }\r\n\r\n  }\r\n\r\n}","import {HitObject, HitObjectType} from \"./hitObject\";\r\nimport {SerializedSpinner} from \"../types\";\r\nimport {Vec2} from \"../math\";\r\nimport {HitSample} from \"./hitSound\";\r\n\r\nconst spinnerPosition = new Vec2(256, 192);\r\n\r\nexport class Spinner extends HitObject {\r\n\r\n\r\n  constructor(options?: SerializedSpinner) {\r\n    super(options);\r\n    if (options) {\r\n      this.duration = options.duration;\r\n    }\r\n  }\r\n\r\n  readonly type = HitObjectType.Spinner;\r\n\r\n  private _duration = 0;\r\n\r\n  get duration() {\r\n    return this._duration;\r\n  }\r\n\r\n  set duration(value: number) {\r\n    if (value === this._duration) return;\r\n    this._duration = value;\r\n    this.onUpdate.emit(\"duration\");\r\n  }\r\n\r\n\r\n  serialize(): SerializedSpinner {\r\n    return {\r\n      id: this.id,\r\n      type: \"spinner\",\r\n      position: this.position,\r\n      newCombo: this.isNewCombo,\r\n      attribution: this.attribution,\r\n      startTime: this.startTime,\r\n      duration: this.duration,\r\n      comboOffset: this.comboOffset,\r\n      hitSound: { ...this._hitSound },\r\n    };\r\n  }\r\n\r\n  contains(point: Vec2): boolean {\r\n    return Vec2.closerThan(point, spinnerPosition, 128);\r\n  }\r\n\r\n  override get position() {\r\n    return spinnerPosition;\r\n  }\r\n\r\n  override set position(value: Vec2) {\r\n    // we ignore this\r\n  }\r\n\r\n  override get isNewCombo() {\r\n    return true;\r\n  }\r\n\r\n  override set isNewCombo(value: boolean) {\r\n    // we ignore this\r\n  }\r\n\r\n  patch(update: Partial<SerializedSpinner>) {\r\n    super.patch(update);\r\n    if (update.duration !== undefined) this.duration = update.duration;\r\n  }\r\n\r\n  calculateHitSamples(): HitSample[] {\r\n    return [];\r\n  }\r\n\r\n}","import {SerializedHitObject} from \"../types\";\r\nimport {HitObject} from \"./hitObject\";\r\nimport {HitCircle} from \"./hitCircle\";\r\nimport {Slider} from \"./slider\";\r\nimport {Spinner} from \"./spinner\";\r\n\r\nexport function deserializeHitObject(plain: SerializedHitObject): HitObject {\r\n  switch (plain.type) {\r\n    case \"circle\":\r\n      return new HitCircle(plain);\r\n    case \"slider\":\r\n      return new Slider(plain);\r\n    case \"spinner\":\r\n      return new Spinner(plain);\r\n  }\r\n}","import {SerializedHitObject} from \"../../types\";\r\nimport {CommandContext, CommandHandler} from \"../command\";\r\nimport {deserializeHitObject} from \"../../osu/deserializeHitObject\";\r\nimport {EditorCommand} from \"./index\";\r\n\r\nexport interface CreateHitObjectCommand {\r\n  hitObject: SerializedHitObject;\r\n}\r\n\r\nexport const CreateHitObjectHandler: CommandHandler<CreateHitObjectCommand> = {\r\n  apply(command, context) {\r\n    if (context.local || (!context.local && !context.own)) {\r\n      context.hitObjects.add(deserializeHitObject(command.hitObject));\r\n    }\r\n  },\r\n  createUndo(command: CreateHitObjectCommand, context: CommandContext): EditorCommand | undefined {\r\n    if (command.hitObject.id)\r\n      return EditorCommand.deleteHitObject({\r\n        id: command.hitObject.id,\r\n      });\r\n  },\r\n};\r\n\r\nexport interface DeleteHitObjectCommand {\r\n  id: string;\r\n}\r\n\r\nexport const DeleteHitObjectHandler: CommandHandler<DeleteHitObjectCommand> = {\r\n  apply(command, context) {\r\n    if (context.local || (!context.local && !context.own)) {\r\n      const hitObject = context.hitObjects.getById(command.id);\r\n      if (hitObject) {\r\n        context.hitObjects.remove(hitObject);\r\n      }\r\n    }\r\n  },\r\n  createUndo(command: DeleteHitObjectCommand, context: CommandContext): EditorCommand | undefined {\r\n    const hitObject = context.hitObjects.getById(command.id);\r\n    if (hitObject) {\r\n      return EditorCommand.createHitObject({\r\n        hitObject: hitObject.serialize(),\r\n      });\r\n    }\r\n  },\r\n};","import {SerializedEditorBookmark} from \"../types\";\r\n\r\nexport class EditorBookmark {\r\n  time: number;\r\n  name: string | null;\r\n\r\n  constructor(options: SerializedEditorBookmark) {\r\n    this.time = options.time;\r\n    this.name = options.name;\r\n  }\r\n\r\n  serialize(): SerializedEditorBookmark {\r\n    return {\r\n      time: this.time,\r\n      name: this.name,\r\n    };\r\n  }\r\n\r\n}","import {CommandContext, CommandHandler} from \"../command\";\r\nimport {EditorCommand} from \"./index\";\r\nimport {EditorBookmark} from \"../../osu/bookmark\";\r\n\r\nexport interface CreateBookmarkCommand {\r\n  time: number;\r\n  name: string,\r\n}\r\n\r\nexport interface RemoveBookmarkCommand {\r\n  time: number;\r\n}\r\n\r\nexport class CreateBookmarkHandler implements CommandHandler<CreateBookmarkCommand> {\r\n  apply(command: CreateBookmarkCommand, context: CommandContext): void {\r\n    console.log(\"createBookmark\", command, context.beatmap.bookmarks);\r\n    if (context.beatmap.bookmarks.some(it => it.time === command.time)) {\r\n      return;\r\n    }\r\n    context.beatmap.bookmarks.push(new EditorBookmark({\r\n      time: command.time,\r\n      name: command.name,\r\n    }));\r\n    context.beatmap.bookmarks.sort((a, b) => a.time - b.time);\r\n    context.beatmap.onBookmarksChanged.emit();\r\n  }\r\n\r\n  createUndo(command: CreateBookmarkCommand): EditorCommand | undefined {\r\n    return EditorCommand.removeBookmark({\r\n      time: command.time,\r\n    });\r\n  }\r\n}\r\n\r\nexport class RemoveBookmarkHandler implements CommandHandler<RemoveBookmarkCommand> {\r\n  apply(command: RemoveBookmarkCommand, context: CommandContext): void {\r\n    const index = context.beatmap.bookmarks.findIndex(it => it.time === command.time);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n    context.beatmap.bookmarks.splice(index, 1);\r\n    context.beatmap.onBookmarksChanged.emit();\r\n  }\r\n\r\n  createUndo(command: RemoveBookmarkCommand, context: CommandContext): EditorCommand | undefined {\r\n    const bookmark = context.beatmap.bookmarks.find(it => it.time === command.time);\r\n    if (!bookmark) {\r\n      return;\r\n    }\r\n    return EditorCommand.createBookmark({\r\n      time: bookmark.time,\r\n      name: bookmark.name,\r\n    });\r\n  }\r\n}","import {VersionedEditorCommand} from \"../client\";\r\nimport * as msgpack from \"@ygoe/msgpack\";\r\nimport {match} from \"variant\";\r\nimport {EditorCommand, UpdateHitObjectCommand} from \"./index\";\r\nimport {SerializedHitCircle, SerializedHitObject, SerializedSlider, SerializedSpinner} from \"../../types\";\r\nimport * as uuid from \"uuid\";\r\n\r\nexport function encodeCommands(commands: VersionedEditorCommand[]) {\r\n  // const minified = (commands.map(command => {\r\n  //   return {\r\n  //     v: command.version,\r\n  //     c: encodeCommand(command.command),\r\n  //   };\r\n  // }));\r\n\r\n  return msgpack.encode(commands);\r\n}\r\n\r\ntype EncodedCommand =\r\n  | { t: 0, h: SerializedHitObject, }\r\n  | { t: 1, h: string, u: any }\r\n  | { t: 2, h: string, }\r\n  | { t: 3, n: string, r: number, }\r\n  | { t: 4, r: number, };\r\n\r\n\r\nfunction encodeCommand(command: EditorCommand): EncodedCommand {\r\n  return match(command, {\r\n    createHitObject(payload) {\r\n      return {\r\n        t: 0,\r\n        h: payload.hitObject,\r\n      } as EncodedCommand;\r\n    },\r\n    updateHitObject(payload) {\r\n      return {\r\n        t: 1,\r\n        h: payload.hitObject,\r\n        u: encodeHitObjectUpdate(payload.update),\r\n      } as EncodedCommand;\r\n    },\r\n    deleteHitObject(payload) {\r\n      return {\r\n        t: 2,\r\n        h: payload.id,\r\n      } as EncodedCommand;\r\n    },\r\n    createBookmark(payload) {\r\n      return {\r\n        t: 3,\r\n        n: payload.name,\r\n        r: payload.time,\r\n      } as EncodedCommand;\r\n    },\r\n    removeBookmark(payload) {\r\n      return {\r\n        t: 4,\r\n        r: payload.time,\r\n      } as EncodedCommand;\r\n    },\r\n  });\r\n}\r\n\r\n\r\nfunction decodeCommand(command: EncodedCommand): EditorCommand {\r\n  switch (command.t) {\r\n    case 0:\r\n      return EditorCommand.createHitObject({\r\n        hitObject: command.h,\r\n      });\r\n    case 1:\r\n      return EditorCommand.updateHitObject({\r\n        hitObject: command.h,\r\n        update: decodeHitObjectUpdate(command.u),\r\n      });\r\n    case 2:\r\n      return EditorCommand.deleteHitObject({\r\n        id: command.h,\r\n      });\r\n    case 3:\r\n      return EditorCommand.createBookmark({\r\n        name: command.n,\r\n        time: command.r,\r\n      });\r\n    case 4:\r\n      return EditorCommand.removeBookmark({\r\n        time: command.r,\r\n      });\r\n  }\r\n}\r\n\r\nexport function decodeCommands(data: Uint8Array): VersionedEditorCommand[] {\r\n  const commands = msgpack.decode(data);\r\n  return commands;\r\n  // return commands.map((command: any) => {\r\n  //   return {\r\n  //     version: command.v,\r\n  //     command: decodeCommand(command.c),\r\n  //   };\r\n  // });\r\n}\r\n\r\nfunction encodeHitObjectUpdate(update: Partial<\r\n  Omit<SerializedHitCircle, \"type\"> &\r\n  Omit<SerializedSlider, \"type\"> &\r\n  Omit<SerializedSpinner, \"type\">\r\n>) {\r\n\r\n  const encoded: any = {};\r\n\r\n  if (update.startTime !== undefined) encoded.a = update.startTime;\r\n  if (update.position !== undefined) encoded.c = update.position;\r\n  if (update.newCombo !== undefined) encoded.b = update.newCombo;\r\n  if (update.duration !== undefined) encoded.d = update.duration;\r\n  if (update.path !== undefined) encoded.e = update.path;\r\n  if (update.repeats !== undefined) encoded.f = update.repeats;\r\n  if (update.expectedDistance !== undefined) encoded.g = update.expectedDistance;\r\n  if (update.velocity !== undefined) encoded.h = update.velocity;\r\n  if (update.comboOffset !== undefined) encoded.i = update.comboOffset;\r\n\r\n  return encoded;\r\n}\r\n\r\nfunction decodeHitObjectUpdate(update: any): Partial<SerializedHitObject> {\r\n  return {\r\n    startTime: update.a,\r\n    position: update.c,\r\n    newCombo: update.b,\r\n    duration: update.d,\r\n    path: update.e,\r\n    repeats: update.f,\r\n    expectedDistance: update.g,\r\n    velocity: update.h,\r\n    comboOffset: update.i,\r\n  };\r\n}","import {CommandHandler} from \"../command\";\r\nimport {UpdateHitObjectCommand, UpdateHitObjectHandler} from \"./updateHitObject\";\r\nimport {fields, lookup, Lookup, TypeNames, variantModule, VariantOf, VariantsOfUnion} from \"variant\";\r\nimport {HitObject} from \"../../osu\";\r\nimport {\r\n  CreateHitObjectCommand,\r\n  CreateHitObjectHandler,\r\n  DeleteHitObjectCommand,\r\n  DeleteHitObjectHandler,\r\n} from \"./createHitObjects\";\r\nimport {\r\n  CreateBookmarkCommand,\r\n  CreateBookmarkHandler,\r\n  RemoveBookmarkCommand,\r\n  RemoveBookmarkHandler,\r\n} from \"./bookmarkCommands\";\r\nimport {encodeUuid} from \"../../util\";\r\n\r\nexport * from \"./updateHitObject\";\r\nexport * from \"./encoder\";\r\n\r\nexport const EditorCommand = variantModule({\r\n  updateHitObject: fields<UpdateHitObjectCommand>(),\r\n  createHitObject: fields<CreateHitObjectCommand>(),\r\n  deleteHitObject: fields<DeleteHitObjectCommand>(),\r\n  createBookmark: fields<CreateBookmarkCommand>(),\r\n  removeBookmark: fields<RemoveBookmarkCommand>(),\r\n});\r\n\r\nexport type EditorCommand<T extends TypeNames<typeof EditorCommand> = undefined> = VariantOf<typeof EditorCommand, T>\r\n\r\nconst commandHandlers: Lookup<VariantsOfUnion<EditorCommand>> = {\r\n  updateHitObject: UpdateHitObjectHandler,\r\n  createHitObject: CreateHitObjectHandler,\r\n  deleteHitObject: DeleteHitObjectHandler,\r\n  createBookmark: new CreateBookmarkHandler(),\r\n  removeBookmark: new RemoveBookmarkHandler(),\r\n};\r\n\r\nexport function getCommandHandler<T extends EditorCommand>(command: T): CommandHandler<T> {\r\n  return lookup(command, commandHandlers);\r\n}\r\n\r\nexport function updateHitObject(hitObject: HitObject, update: UpdateHitObjectCommand[\"update\"]) {\r\n  return EditorCommand.updateHitObject({\r\n    hitObject: hitObject.id,\r\n    update,\r\n  });\r\n}","import {fields, TypeNames, variantModule, VariantOf} from \"variant\";\r\nimport {IVec2} from \"../math/vec2\";\r\nimport {BeatmapId} from \"./beatmap\";\r\n\r\n\r\nexport interface Presence {\r\n  activeBeatmap: BeatmapId | null;\r\n  activity: UserActivity | null;\r\n}\r\n\r\nexport const UserActivity = variantModule({\r\n  idle: fields<{ lastActive: number }>(),\r\n  composeScreen: fields<{ cursorPosition: IVec2, mouseDown: boolean, currentTime: number, activeTool?: string }>(),\r\n});\r\n\r\nexport type UserActivity<T extends TypeNames<typeof UserActivity> = undefined> = VariantOf<typeof UserActivity, T>;","import {SerializedTimingPoint, SerializedVelocityPoint} from \"../types\";\r\nimport {SerializedControlPoints} from \"../protocol\";\r\n\r\n\r\nexport type TimingPoint = SerializedTimingPoint;\r\nexport type VelocityPoint = SerializedVelocityPoint;\r\n\r\nexport class ControlPointManager {\r\n\r\n  readonly velocities: VelocityPoint[];\r\n  readonly timing: TimingPoint[];\r\n\r\n\r\n  constructor(\r\n    options: SerializedControlPoints,\r\n  ) {\r\n    this.velocities = options.velocity;\r\n    this.timing = options.timing;\r\n  }\r\n\r\n  serialize(): SerializedControlPoints {\r\n    return {\r\n      timing: this.timing,\r\n      velocity: this.velocities,\r\n    };\r\n  }\r\n\r\n  timingPointAt(time: number): SerializedTimingPoint {\r\n    if (this.timing.length === 0) {\r\n      return {\r\n        time: 0,\r\n        beatLength: 60_000 / 120,\r\n      };\r\n    }\r\n    let { index, found } = this.binarySearch(this.timing, time);\r\n    if (!found && index > 0)\r\n      index--;\r\n\r\n    return this.timing[index];\r\n  }\r\n\r\n  getVelocityAt(time: number): number {\r\n    if (this.velocities.length === 0) {\r\n      return 1;\r\n    }\r\n    let { index, found } = this.binarySearch(this.velocities, time);\r\n    if (!found && index > 0)\r\n      index--;\r\n    if (index === 0 && this.velocities[index].time > time)\r\n      return 1;\r\n\r\n    return this.velocities[index].velocity;\r\n  }\r\n\r\n  getTicks(\r\n    startTime: number,\r\n    endTime: number,\r\n    divisor: number = 4,\r\n  ) {\r\n    if (this.timing.length == 0) return [];\r\n\r\n    let { index, found } = this.binarySearch(this.timing, startTime);\r\n    if (!found && index > 0)\r\n      index--;\r\n\r\n    const ticks: TickInfo[] = [];\r\n    let timingPoint = this.timing[index];\r\n    let offset = 0;\r\n    if (timingPoint.time > startTime) {\r\n      offset = -Math.ceil(\r\n        (timingPoint.time - startTime) / timingPoint.beatLength * divisor,\r\n      ) * timingPoint.beatLength / divisor;\r\n    }\r\n\r\n    while (timingPoint) {\r\n      const tickEndTime = Math.min(\r\n        this.timing[index + 1]?.time ?? endTime,\r\n        endTime,\r\n      );\r\n\r\n      const numTicks = Math.ceil((tickEndTime - timingPoint.time - offset) / timingPoint.beatLength * divisor);\r\n\r\n      ticks.push(\r\n        ...Array.from({ length: numTicks }, (_, i) => {\r\n          const time = offset + i * timingPoint.beatLength / divisor;\r\n\r\n          let type = TickType.Full;\r\n          let subticks = Math.round(time / timingPoint.beatLength * 48);\r\n          subticks = mod(mod(subticks, 48) + 48, 48);\r\n\r\n          if (subticks % 48 === 0) {\r\n            type = TickType.Full;\r\n          } else if (subticks % 24 === 0) {\r\n            type = TickType.Half;\r\n          } else if (subticks % 16 === 0) {\r\n            type = TickType.Third;\r\n          } else if (subticks % 12 === 0) {\r\n            type = TickType.Quarter;\r\n          } else if (subticks % 8 === 0) {\r\n            type = TickType.Sixth;\r\n          } else if (subticks % 6 === 0) {\r\n            type = TickType.Eighth;\r\n          } else if (subticks % 4 === 0) {\r\n            type = TickType.Twelfth;\r\n          } else if (subticks % 3 === 0) {\r\n            type = TickType.Sixteenth;\r\n          }\r\n\r\n          return {\r\n            time: timingPoint.time + time,\r\n            type,\r\n          };\r\n        }),\r\n      );\r\n\r\n      timingPoint = this.timing[++index];\r\n\r\n      offset = 0;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  private binarySearch(array: { time: number }[], time: number): { index: number, found: boolean } {\r\n    let left = 0;\r\n    let right = array.length - 1;\r\n    while (left <= right) {\r\n      const mid = Math.floor((left + right) / 2);\r\n      if (array[mid].time === time) {\r\n        return { index: mid, found: true };\r\n      } else if (array[mid].time < time) {\r\n        left = mid + 1;\r\n      } else {\r\n        right = mid - 1;\r\n      }\r\n    }\r\n    return { index: left, found: false };\r\n  }\r\n\r\n  snap(time: number, divisor: number, type: \"round\" | \"floor\" | \"ceil\" = \"round\") {\r\n    const timingPoint = this.timingPointAt(time);\r\n    const offset = time - timingPoint.time;\r\n    const beatLength = timingPoint.beatLength / divisor;\r\n    let beat: number;\r\n    switch (type) {\r\n      case \"round\":\r\n        beat = Math.round(offset / beatLength);\r\n        break;\r\n      case \"floor\":\r\n        beat = Math.floor(offset / beatLength);\r\n        break;\r\n      case \"ceil\":\r\n        beat = Math.ceil(offset / beatLength);\r\n        break;\r\n    }\r\n    return timingPoint.time + beat * beatLength;\r\n  }\r\n\r\n}\r\n\r\nfunction mod(a: number, n: number) {\r\n  return ((a % n) + n) % n;\r\n}\r\n\r\nexport const enum TickType {\r\n  Full = 1,\r\n  Half = 2,\r\n  Third = 3,\r\n  Quarter = 4,\r\n  Sixth = 6,\r\n  Eighth = 8,\r\n  Twelfth = 12,\r\n  Sixteenth = 16,\r\n}\r\n\r\nexport interface TickInfo {\r\n  time: number;\r\n  type: TickType;\r\n}","import {SerializedHitObject} from \"../types\";\r\nimport {HitObject, HitObjectUpdateType} from \"./hitObject\";\r\nimport {deserializeHitObject} from \"./deserializeHitObject\";\r\nimport {SerializedBeatmapDifficulty, SerializedBeatmapGeneral} from \"../protocol\";\r\nimport {ControlPointManager} from \"./controlPointManager\";\r\nimport {Vec2} from \"../math\";\r\nimport {Slider} from \"./slider\";\r\nimport {HitCircle} from \"./hitCircle\";\r\nimport {Spinner} from \"./spinner\";\r\nimport {ref, watch} from \"vue\";\r\nimport {Action} from \"../util/action\";\r\nimport {binarySearch} from \"../util\";\r\n\r\nexport class HitObjectManager {\r\n  public hitObjects: HitObject[];\r\n\r\n  private _hitObjectMap = new Map<string, HitObject>();\r\n\r\n  constructor(\r\n    hitObjects: SerializedHitObject[],\r\n    private readonly difficulty: SerializedBeatmapDifficulty,\r\n    private readonly controlPoints: ControlPointManager,\r\n    private readonly general: SerializedBeatmapGeneral,\r\n  ) {\r\n    this.hitObjects = hitObjects.map(hitObject => deserializeHitObject(hitObject));\r\n    // this.sortHitObjects();\r\n    this.hitObjects.forEach(hitObject => this._onAdd(hitObject, true));\r\n    this.calculateCombos();\r\n    this.calculateStacking(this.hitObjects, general.stackLeniency, 3, 0, this.hitObjects.length - 1);\r\n    watch(this._stackVersion, () => {\r\n      this.calculateStacking(this.hitObjects, general.stackLeniency, 3, 0, this.hitObjects.length - 1);\r\n    });\r\n  }\r\n\r\n  private _stackVersion = ref(0);\r\n\r\n  private _onAdd(hitObject: HitObject, isInit = false) {\r\n    this._hitObjectMap.set(hitObject.id, hitObject);\r\n    hitObject.applyDefaults(this.difficulty, this.controlPoints);\r\n    hitObject.onUpdate.addListener((key) => {\r\n      this._onUpdate(hitObject, key);\r\n    });\r\n\r\n    if (!isInit) {\r\n      this.sortHitObjects();\r\n      this._calculateStackingFor(hitObject);\r\n      this.calculateCombos();\r\n    }\r\n\r\n    this.onAdded.emit(hitObject);\r\n  }\r\n\r\n  add(hitObject: HitObject) {\r\n    this.hitObjects.push(hitObject);\r\n    this._onAdd(hitObject);\r\n  }\r\n\r\n  remove(hitObject: HitObject) {\r\n    const index = this.hitObjects.indexOf(hitObject);\r\n    if (index === -1) return;\r\n    this.hitObjects.splice(index, 1);\r\n    this._onRemove(hitObject);\r\n  }\r\n\r\n  private _onRemove(hitObject: HitObject) {\r\n    this._hitObjectMap.delete(hitObject.id);\r\n    hitObject.onUpdate.removeListeners();\r\n    this.calculateCombos();\r\n    this.onRemoved.emit(hitObject);\r\n  }\r\n\r\n  private _onUpdate(hitObject: HitObject, key: HitObjectUpdateType) {\r\n    switch (key) {\r\n      case \"startTime\":\r\n        this.sortHitObjects();\r\n        this.calculateCombos();\r\n        this._calculateStackingFor(hitObject);\r\n        break;\r\n      case \"newCombo\":\r\n        this.calculateCombos();\r\n        break;\r\n      case \"position\":\r\n        this._calculateStackingFor(hitObject);\r\n    }\r\n    this.onUpdated.emit(hitObject, key);\r\n  }\r\n\r\n  private sortHitObjects() {\r\n    this.hitObjects.sort((a, b) => a.startTime - b.startTime);\r\n  }\r\n\r\n  serialize(): SerializedHitObject[] {\r\n    return this.hitObjects.map(it => it.serialize());\r\n  }\r\n\r\n  private calculateCombos() {\r\n    let comboIndex = 0;\r\n    let indexInCombo = 0;\r\n    for (const hitObject of this.hitObjects) {\r\n      if (hitObject.isNewCombo) {\r\n        comboIndex += 1 + hitObject.comboOffset;\r\n        indexInCombo = 0;\r\n      }\r\n      hitObject.comboIndex = comboIndex;\r\n      hitObject.indexInCombo = indexInCombo;\r\n      indexInCombo++;\r\n      hitObject.onUpdate.emit(\"combo\");\r\n    }\r\n  }\r\n\r\n  get first(): HitObject | undefined {\r\n    return this.hitObjects[0];\r\n  }\r\n\r\n  get last(): HitObject | undefined {\r\n    return this.hitObjects[this.hitObjects.length - 1];\r\n  }\r\n\r\n  private calculateStacking(\r\n    hitObjects: HitObject[],\r\n    stackLeniency: number,\r\n    stackDistance: number,\r\n    startIndex: number = 0,\r\n    endIndex: number = hitObjects.length - 1,\r\n  ) {\r\n    let extendedEndIndex = endIndex;\r\n    const alteredObjects = new Set<HitObject>();\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n      hitObjects[i].stackHeight = 0;\r\n      hitObjects[i].stackRoot = undefined;\r\n    }\r\n    if (stackLeniency === 0) return;\r\n\r\n    performance.mark(\"calculateStacking-start\");\r\n\r\n    if (endIndex < hitObjects.length - 1) {\r\n      for (let i = endIndex; i >= startIndex; i--) {\r\n        let stackBaseIndex = i;\r\n        for (let n = stackBaseIndex + 1; n < hitObjects.length; n++) {\r\n          const stackBaseObject = hitObjects[stackBaseIndex];\r\n          const objectN = hitObjects[n];\r\n\r\n          const endTime = stackBaseObject.endTime;\r\n          const stackThreshold = objectN.timePreempt * stackLeniency;\r\n\r\n          if (objectN.startTime - endTime > stackThreshold)\r\n            break;\r\n\r\n          if (\r\n            Vec2.distance(stackBaseObject.position, objectN.position) < stackDistance ||\r\n            (stackBaseObject instanceof Slider && Vec2.distance(stackBaseObject.endPosition, objectN.position) < stackDistance)\r\n          ) {\r\n            stackBaseIndex = n;\r\n            objectN.stackHeight = 0;\r\n            objectN.stackRoot = undefined;\r\n            alteredObjects.add(objectN);\r\n          }\r\n        }\r\n\r\n        if (stackBaseIndex > extendedEndIndex) {\r\n          extendedEndIndex = stackBaseIndex;\r\n          if (extendedEndIndex === hitObjects.length - 1) break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let extendedStartIndex = startIndex;\r\n    for (let i = extendedEndIndex; i >= extendedStartIndex; i--) {\r\n      let n = i;\r\n\r\n      let objectI = hitObjects[i];\r\n      if (objectI.stackHeight !== 0 || objectI instanceof Spinner) continue;\r\n\r\n      const stackThreshold = objectI.timePreempt * stackLeniency;\r\n\r\n      if (objectI instanceof HitCircle) {\r\n        while (--n >= 0) {\r\n          const objectN = hitObjects[n];\r\n          if (objectN instanceof Spinner) continue;\r\n\r\n          const endTime = objectN.endTime;\r\n\r\n          if (objectI.startTime - endTime > stackThreshold) break;\r\n\r\n          if (n < extendedStartIndex && objectN.stackRoot === objectI.id) {\r\n            extendedStartIndex = n;\r\n            objectN.stackHeight = 0;\r\n            objectN.stackRoot = undefined;\r\n            alteredObjects.add(objectN);\r\n          }\r\n\r\n          if (objectN instanceof Slider && Vec2.distance(objectN.endPosition, objectI.position) < stackDistance) {\r\n            const offset = objectI.stackHeight - objectN.stackHeight + 1;\r\n\r\n            for (let j = n + 1; j <= i; j++) {\r\n              const objectJ = hitObjects[j];\r\n              if (Vec2.distance(objectN.endPosition, objectJ.position) < stackDistance) {\r\n                objectJ.stackHeight -= offset;\r\n                objectJ.stackRoot = objectN.id;\r\n                alteredObjects.add(objectJ);\r\n              }\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n          if (Vec2.distance(objectN.position, objectI.position) < stackDistance) {\r\n            objectN.stackHeight = objectI.stackHeight + 1;\r\n            objectN.stackRoot = objectI.id;\r\n            alteredObjects.add(objectN);\r\n            objectI = objectN;\r\n          }\r\n        }\r\n      } else if (objectI instanceof Slider) {\r\n        while (--n >= startIndex) {\r\n          const objectN = hitObjects[n];\r\n\r\n          if (objectI.startTime - objectN.endTime > stackThreshold) break;\r\n\r\n          if (Vec2.distance(objectN.endPosition, objectI.position) < stackDistance) {\r\n            objectN.stackHeight = objectI.stackHeight + 1;\r\n            alteredObjects.add(objectN);\r\n            objectI = objectN;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const object of alteredObjects) {\r\n      object.onUpdate.emit(\"stackHeight\");\r\n    }\r\n\r\n    performance.mark(\"calculateStacking-end\");\r\n    performance.measure(\"calculateStacking\", \"calculateStacking-start\", \"calculateStacking-end\");\r\n  }\r\n\r\n  private _calculateStackingFor(hitObject: HitObject) {\r\n    const index = this.hitObjects.indexOf(hitObject);\r\n    this.calculateStacking(this.hitObjects, 0.9, 3, index, index);\r\n  }\r\n\r\n  getById(id: string): HitObject | undefined {\r\n    return this._hitObjectMap.get(id);\r\n  }\r\n\r\n  readonly onRemoved = new Action<[HitObject]>();\r\n  readonly onAdded = new Action<[HitObject]>();\r\n  readonly onUpdated = new Action<[HitObject, HitObjectUpdateType]>();\r\n\r\n  getAtTime(time: number): HitObject | undefined {\r\n    let { found, index } = binarySearch(time, this.hitObjects, it => it.startTime);\r\n    if (found) return this.hitObjects[index];\r\n    if (index === 0) return undefined;\r\n    const hitObject = this.hitObjects[index - 1];\r\n    if (hitObject.endTime > time) return hitObject;\r\n    return undefined;\r\n  }\r\n\r\n}","import {hitObjectId} from \"./hitObject\";\r\n\r\nexport class HitSoundSample {\r\n\r\n  constructor(options: SerializedHitSoundSample) {\r\n    this.id = options.id;\r\n    this.time = options.time;\r\n  }\r\n\r\n  id = hitObjectId();\r\n  time: number;\r\n\r\n  selected = false;\r\n\r\n  serialize(): SerializedHitSoundSample {\r\n    return {\r\n      id: this.id,\r\n      time: this.time,\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport interface SerializedHitSoundSample {\r\n  id: string;\r\n  time: number;\r\n}","import {hitObjectId} from \"./hitObject\";\r\nimport {SampleSet, SampleType} from \"./hitSound\";\r\nimport {HitSoundSample, SerializedHitSoundSample} from \"./hitSound2\";\r\n\r\nexport class HitSoundLayer {\r\n  constructor(options: SerializedHitSoundLayer) {\r\n    this.id = options.id ?? hitObjectId();\r\n    this.name = options.name;\r\n    this.sampleSet = options.sampleSet;\r\n    this.type = options.type;\r\n    this.customFilename = options.customFilename;\r\n    this.samples = options.samples.map(sample => new HitSoundSample(sample));\r\n    this.enabled = options.enabled;\r\n    this.volume = options.volume;\r\n  }\r\n\r\n  patch(options: Partial<SerializedHitSoundLayer>) {\r\n    if (options.name !== undefined)\r\n      this.name = options.name;\r\n    if (options.sampleSet !== undefined)\r\n      this.sampleSet = options.sampleSet;\r\n    if (options.type !== undefined)\r\n      this.type = options.type;\r\n    if (options.customFilename !== undefined)\r\n      this.customFilename = options.customFilename;\r\n    if (options.enabled !== undefined)\r\n      this.enabled = options.enabled;\r\n    if (options.volume !== undefined)\r\n      this.volume = options.volume;\r\n  }\r\n\r\n  id: string = hitObjectId();\r\n  name: string | null;\r\n  sampleSet: SampleSet;\r\n  type: SampleType;\r\n  customFilename: string | null;\r\n  samples: HitSoundSample[];\r\n  enabled: boolean;\r\n  volume: number;\r\n\r\n  serialize(): SerializedHitSoundLayer {\r\n    return {\r\n      id: this.id,\r\n      name: this.name,\r\n      sampleSet: this.sampleSet,\r\n      type: this.type,\r\n      customFilename: this.customFilename,\r\n      samples: this.samples,\r\n      enabled: this.enabled,\r\n      volume: this.volume,\r\n    };\r\n  }\r\n}\r\n\r\nexport interface SerializedHitSoundLayer {\r\n  id?: string;\r\n  name: string | null;\r\n  sampleSet: SampleSet;\r\n  type: SampleType;\r\n  customFilename: string | null;\r\n  samples: SerializedHitSoundSample[];\r\n  enabled: boolean;\r\n  volume: number;\r\n}\r\n","export class Envelope {\r\n\r\n  constructor(options: SerializedEnvelope) {\r\n    this.controlPoints = options.controlPoints.map(x => new EnvelopeControlPoint(x));\r\n  }\r\n\r\n  controlPoints: EnvelopeControlPoint[];\r\n\r\n  serialize(): SerializedEnvelope {\r\n    return {\r\n      controlPoints: this.controlPoints.map(x => x.serialize()),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport interface SerializedEnvelope {\r\n  controlPoints: SerializedEnvelopeControlPoint[];\r\n}\r\n\r\nexport class EnvelopeControlPoint {\r\n\r\n  constructor(options: SerializedEnvelopeControlPoint) {\r\n    this.time = options.time;\r\n    this.value = options.value;\r\n    this.type = AnchorType.Linear;\r\n  }\r\n\r\n  time: number;\r\n  value: number;\r\n  type: AnchorType;\r\n\r\n  serialize(): SerializedEnvelopeControlPoint {\r\n    return {\r\n      time: this.time,\r\n      value: this.value,\r\n      type: this.type,\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport interface SerializedEnvelopeControlPoint {\r\n  time: number;\r\n  value: number;\r\n  type: AnchorType;\r\n}\r\n\r\nexport const enum AnchorType {\r\n  Linear,\r\n  Constant,\r\n}","import {HitSoundLayer, SerializedHitSoundLayer} from \"./hitSoundLayer\";\r\nimport {SampleSet, SampleType} from \"./hitSound\";\r\nimport {Envelope, SerializedEnvelope} from \"./envelope\";\r\n\r\nexport class HitSoundManager {\r\n  constructor(options: SerializedHitSounds) {\r\n    this.layers = (options.layers ?? []).map(layer => new HitSoundLayer(layer));\r\n    if (options.volume) {\r\n      this.volume = new Envelope(options.volume);\r\n    } else {\r\n      this.volume = new Envelope({ controlPoints: [] });\r\n    }\r\n  }\r\n\r\n  readonly layers: HitSoundLayer[] = [];\r\n\r\n  readonly volume: Envelope;\r\n\r\n  serialize(): SerializedHitSounds {\r\n    return {\r\n      layers: this.layers.map(layer => layer.serialize()),\r\n      volume: this.volume.serialize(),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport interface SerializedHitSounds {\r\n  layers: SerializedHitSoundLayer[];\r\n  volume?: SerializedEnvelope;\r\n}\r\n\r\nexport function defaultHitSoundLayers(): HitSoundLayer[] {\r\n  const types = [SampleType.Normal, SampleType.Whistle, SampleType.Finish, SampleType.Clap];\r\n  const sampleSets = [SampleSet.Normal, SampleSet.Soft, SampleSet.Drum];\r\n  const layers: HitSoundLayer[] = [];\r\n  for (const sampleSet of sampleSets) {\r\n    for (const type of types) {\r\n      layers.push(new HitSoundLayer({\r\n        name: null,\r\n        sampleSet,\r\n        type,\r\n        customFilename: null,\r\n        samples: [],\r\n        volume: 1,\r\n        enabled: true,\r\n      }));\r\n    }\r\n  }\r\n  return layers;\r\n}","import {\r\n  BeatmapId,\r\n  MapsetId,\r\n  SerializedBeatmap,\r\n  SerializedBeatmapDifficulty,\r\n  SerializedBeatmapGeneral,\r\n  SerializedMapset,\r\n  SerializedMapsetMetadata,\r\n} from \"../protocol\";\r\nimport {UserInfo} from \"../types\";\r\nimport {ControlPointManager} from \"./controlPointManager\";\r\nimport {HitObjectManager} from \"./hitObjectManager\";\r\nimport {EditorBookmark} from \"./bookmark\";\r\nimport {Action} from \"../util/action\";\r\nimport {defaultHitSoundLayers, HitSoundManager} from \"./hitSoundManager\";\r\n\r\nexport class Mapset {\r\n  public id: string;\r\n  public creator: UserInfo;\r\n  public meatadata: MapsetMetadata;\r\n\r\n  constructor(options: SerializedMapset) {\r\n    this.id = options.id;\r\n    this.creator = options.creator;\r\n    this.meatadata = new MapsetMetadata(options.metadata);\r\n  }\r\n\r\n  serialize(): SerializedMapset {\r\n    return {\r\n      id: this.id,\r\n      creator: this.creator,\r\n      metadata: this.meatadata.serialize(),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport class Beatmap {\r\n  public readonly id: BeatmapId;\r\n  public setId: MapsetId;\r\n  public readonly hitObjects: HitObjectManager;\r\n  public controlPoints: ControlPointManager;\r\n  public name: string;\r\n  public difficulty: SerializedBeatmapDifficulty;\r\n  public bookmarks: EditorBookmark[];\r\n  public backgroundPath: string | null;\r\n  public colors: number[] = [];\r\n  public audioFilename: string;\r\n  public general: SerializedBeatmapGeneral;\r\n  public metadata: MapsetMetadata;\r\n  public hitSounds: HitSoundManager;\r\n\r\n  readonly onBookmarksChanged = new Action();\r\n\r\n  constructor(\r\n    options: SerializedBeatmap,\r\n  ) {\r\n    this.id = options.id;\r\n    this.setId = options.setId;\r\n    this.metadata = new MapsetMetadata(options.metadata);\r\n    this.name = options.name;\r\n    this.general = options.general ?? { stackLeniency: 0.7 };\r\n    this.controlPoints = new ControlPointManager(options.controlPoints);\r\n    this.difficulty = options.difficulty;\r\n    this.hitObjects = new HitObjectManager(options.hitObjects, this.difficulty, this.controlPoints, this.general);\r\n    this.bookmarks = options.bookmarks.map(bookmark => new EditorBookmark(bookmark)).filter(it => it.time != undefined);\r\n    this.backgroundPath = options.backgroundPath;\r\n    this.colors = options.colors.map(color => parseInt(color.substr(1, 6), 16));\r\n    this.audioFilename = options.audioFilename;\r\n    if (this.colors.length === 0) {\r\n      this.colors = [0xff0000, 0x00ff00, 0x0000ff];\r\n    }\r\n    console.log(options.hitSounds)\r\n    this.hitSounds = new HitSoundManager(options.hitSounds ?? { layers: defaultHitSoundLayers() });\r\n\r\n  }\r\n\r\n  serialize(): SerializedBeatmap {\r\n    return {\r\n      id: this.id,\r\n      setId: this.setId,\r\n      metadata: this.metadata.serialize(),\r\n      name: this.name,\r\n      controlPoints: this.controlPoints.serialize(),\r\n      hitObjects: this.hitObjects.serialize(),\r\n      difficulty: this.difficulty,\r\n      bookmarks: this.bookmarks.map(bookmark => bookmark.serialize()),\r\n      backgroundPath: this.backgroundPath,\r\n      colors: this.colors.map(color => \"#\" + color.toString(16)),\r\n      audioFilename: this.audioFilename,\r\n      general: this.general,\r\n      hitSounds: this.hitSounds.serialize(),\r\n    };\r\n  }\r\n}\r\n\r\nexport class MapsetMetadata {\r\n  title: string;\r\n  artist: string;\r\n  tags: string;\r\n\r\n  constructor(options: SerializedMapsetMetadata) {\r\n    this.title = options.title;\r\n    this.artist = options.artist;\r\n    this.tags = options.tags;\r\n  }\r\n\r\n  serialize(): SerializedMapsetMetadata {\r\n    return {\r\n      title: this.title,\r\n      artist: this.artist,\r\n      tags: this.tags,\r\n    };\r\n  }\r\n}"],"names":["PathType","variantModule","fields","payload","key","__spreadValues","SampleSet","SampleType","Additions","uuid","HitObjectType","Vector2","PathApproximator","p","clamp","msgpack","lookup","TickType","ref","watch","AnchorType"],"mappings":"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"}